import { ExcelSelect } from '@components/select/Excel';
import { MyTable } from '@components/table';
import { ColumnDef } from '@tanstack/react-table';
import type { NextPage } from 'next';
import Head from 'next/head';
import { ChangeEvent, useMemo, useState } from 'react';
import { useDispatch } from 'react-redux';
import * as XLSX from 'xlsx';

// 엑셀 파일을 읽는 함수
function readExcelFile(file: any) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = (e: any) => {
            const data = new Uint8Array(e.target.result);
            console.log(XLSX);
            const workbook = XLSX.read(data, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            const headers = jsonData[0] as any;
            const rows = jsonData.slice(1);
            const fields = headers.map((header: any) => {});
            const result = rows.map((row) => {
                const obj = {};
                headers.forEach((header: any, index: number) => {
                    obj[header] = row[index];
                });
                return obj;
            });

            resolve(result);
        };

        reader.onerror = (error) => {
            reject(error);
        };

        reader.readAsArrayBuffer(file);
    });
}

const fields = {
    cnum: '증권번호',
    total_pay: '합계보험료',
    o_pay: '합계원보험료',
    s_pay: '실납입보험료',
};

const selectOptions = [
    {
        label: '실적보험료',
        value: 'payment',
        isFixed: false,
    },
    {
        label: '납입기간',
        value: 'due',
        isFixed: false,
    },
];

const CreatePost: NextPage = () => {
    const dispatch = useDispatch();

    const [file, setFile] = useState<string>('');

    const [loadedData, setLoadedData] = useState([]);

    const handleChangeFile = async (evt: ChangeEvent<any>) => {
        const file = evt.target.files[0];
        try {
            const data = await readExcelFile(file);

            setLoadedData(data as any);
        } catch (error) {
            console.error(error);
        }
    };

    const columns = useMemo<ColumnDef<any>[]>(
        () =>
            Object.entries(fields).map(([key, value]) => {
                return {
                    columns: [
                        {
                            header: (info: any) => {
                                return <strong>{value}</strong>;
                            },
                            accessorKey: value,
                            cell: (info: any) => {
                                let className = '';
                                let cellValue = info.getValue();

                                return (
                                    <span className={className}>
                                        {cellValue}
                                    </span>
                                );
                            },
                        },
                    ],
                    header: (info: any) => {
                        return (
                            <div>
                                <ExcelSelect
                                    options={selectOptions}
                                    placeholder={'선택하세요'}
                                    placeHolderFontSize={16}
                                    height="30px"
                                />
                            </div>
                        );
                    },
                    accessorKey: value,
                };
            }),
        [],
    );

    return (
        <>
            <Head>
                <title>테스트 페이지</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="wr-pages-create-post">
                {/* <Breadcrumb /> */}
                <div>
                    <h2></h2>
                </div>
                <div>
                    <input
                        type="file"
                        value={file}
                        onChange={handleChangeFile}
                    />
                </div>
                {loadedData.length > 0 && (
                    <div className="wr-table__wrap wr-table--border">
                        <MyTable
                            columns={columns}
                            data={loadedData}
                            pageSize={10}
                        />
                    </div>
                )}
            </div>
        </>
    );
};

export default CreatePost;
