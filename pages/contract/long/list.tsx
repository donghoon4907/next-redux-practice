import type { NextPage } from 'next';
import type { AppState } from '@reducers/index';
import type { LongState } from '@reducers/long';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { END } from 'redux-saga';
import dayjs from 'dayjs';
import { MyTable } from '@components/table';
import { wrapper } from '@store/redux';
import { MyPagination } from '@components/pagination';
import { MyLayout } from '@components/Layout';
import { useColumn } from '@hooks/use-column';
import { getOrgasRequest } from '@actions/hr/get-orgas';
import { permissionMiddleware } from '@utils/middleware/permission';
import { getLongsRequest } from '@actions/contract/long/get-longs.action';
import { getCompaniesRequest } from '@actions/hr/get-companies';
import { LongSearchFilter } from '@partials/contract/long/template/SearchFilter';
import { SearchResultTemplate } from '@partials/common/template/SearchResult';

const Longs: NextPage = () => {
    const displayName = 'wr-pages-list2';

    const router = useRouter();

    const { longs } = useSelector<AppState, LongState>((props) => props.long);

    const columns = useColumn(longs.fields);

    const handleClickRow = ({ cidx }: any) => {
        router.push(`${router.pathname}/${cidx}`);
    };

    return (
        <>
            <Head>
                <title>장기계약</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>
            <MyLayout>
                <div className={displayName}>
                    {/* <Breadcrumb /> */}
                    <LongSearchFilter />
                    <SearchResultTemplate
                        total={longs.total.count}
                        pageName="장기 / 장기계약"
                        description={`/ 실적보험료계: ${
                            longs.total.pay
                                ? longs.total.pay.toLocaleString()
                                : 0
                        } / 실적보험료계: ${
                            longs.total.tp ? longs.total.tp.toLocaleString() : 0
                        }`}
                        customUrl="/contract/long/create"
                    />
                    <div className={`${displayName}__body wr-mt`}>
                        <div className="wr-table--scrollable wr-table--hover">
                            <MyTable
                                columns={columns}
                                data={longs.rows}
                                pageSize={longs.lastPayload?.nums}
                                onClickRow={handleClickRow}
                            />
                        </div>
                    </div>
                    <div className={`${displayName}__footer`}>
                        <MyPagination total={longs.total.count}></MyPagination>
                    </div>
                </div>
            </MyLayout>
        </>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    permissionMiddleware(
        async ({ dispatch, sagaTask }, ctx, { userid, user_info }) => {
            const { page, nums, order, date, orga, ...rest } = ctx.query;

            const params: any = {
                page: 1,
                nums: 25,
                condition: {
                    orga: user_info.orga_idx,
                    userid: userid,
                    paydate: [
                        dayjs(new Date()).format('YYYY-MM-01'),
                        dayjs(new Date()).format('YYYY-MM-DD'),
                    ],
                },
                order: {},
            };
            // 페이지공통 - 페이지 번호
            if (page) {
                params.page = Number(page);
            }
            // 페이지공통 - 페이지 크기
            if (nums) {
                params.nums = Number(nums);
            }
            // 페이지공통 - 정렬
            if (order) {
                const [type, sort] = String(order).split(',');

                params.order[type] = sort;
            }
            // 영업조직
            if (orga) {
                params.condition['orga'] = Number(orga);
            }
            // 계약일
            if (date) {
                params.condition!['paydate'] = String(date).split(',');
            }

            // 영업가족, 영업구분, 협회등록, 검색...
            for (const [key, value] of Object.entries(rest)) {
                params.condition[key] = value;
            }

            dispatch(getLongsRequest(params));

            dispatch(getCompaniesRequest('long-view'));

            dispatch(
                getOrgasRequest({
                    idx: '1',
                }),
            );

            dispatch(END);

            try {
                await sagaTask?.toPromise();
            } catch (e) {
                console.error(e);
            }

            return null;
        },
    ),
);

export default Longs;
