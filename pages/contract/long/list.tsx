import type { NextPage } from 'next';
import type { AppState } from '@reducers/index';
import type { LongState } from '@reducers/long';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { END } from 'redux-saga';
import dayjs from 'dayjs';
import { MyTable } from '@components/table';
import { wrapper } from '@store/redux';
import { MyPagination } from '@components/pagination';
import { MyLayout } from '@components/Layout';
import { MyFooter } from '@components/footer';
import { useColumn } from '@hooks/use-column';
import { getOrgasRequest } from '@actions/hr/get-orgas';
import { getUsersRequest } from '@actions/hr/get-users';
import { permissionMiddleware } from '@utils/middleware/permission';
import {
    GetLongsRequestPayload,
    getLongsRequest,
    getLongsSuccess,
} from '@actions/contract/long/get-longs.action';
import { getCompaniesRequest } from '@actions/hr/get-companies';
import { LongSearchFilterTemplate } from '@partials/contract/long/template/SearchFilter';

const Longs: NextPage = () => {
    const displayName = 'wr-pages-list';

    const router = useRouter();

    const { longs } = useSelector<AppState, LongState>((props) => props.long);

    const columns = useColumn(longs.fields);

    const handleClickRow = ({ cidx }: any) => {
        router.replace(`/contract/long/${cidx}`);
    };

    return (
        <>
            <Head>
                <title>장기계약목록</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>
            <MyLayout>
                <div className={displayName}>
                    {/* <Breadcrumb /> */}
                    <div className={`${displayName}__header`}>
                        <LongSearchFilterTemplate />
                    </div>
                    <div className={`${displayName}__body wr-mt`}>
                        <div className="wr-table--scrollable wr-table--hover">
                            <MyTable
                                columns={columns}
                                data={longs.rows}
                                pageSize={longs.lastPayload?.nums}
                                onClickRow={handleClickRow}
                            />
                        </div>
                    </div>
                    <MyFooter>
                        <MyPagination total={longs.total.count}>
                            <span>
                                건수: {longs.total.count.toLocaleString()}
                            </span>
                            <span>
                                실적보험료계: {longs.total.pay.toLocaleString()}
                            </span>
                            <span>
                                수정보험료계:{' '}
                                {longs.total.tp
                                    ? longs.total.tp.toLocaleString()
                                    : 0}
                            </span>
                        </MyPagination>
                    </MyFooter>
                </div>
            </MyLayout>
        </>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    permissionMiddleware(async ({ dispatch, sagaTask }, ctx) => {
        const { page, nums, paydate } = ctx.query;

        const params: GetLongsRequestPayload = {
            page: 1,
            nums: 25,
            condition: {
                paydate: [
                    dayjs(new Date()).format('YYYY-MM-01'),
                    dayjs(new Date()).format('YYYY-MM-DD'),
                ],
            },
            successAction: getLongsSuccess,
        };

        if (page) {
            params.page = +(page as string);
        }
        if (nums) {
            params.nums = +(nums as string);
        }
        if (paydate) {
            params.condition!['paydate'] = (paydate as string).split(',');
        }

        dispatch(getLongsRequest(params));

        dispatch(getCompaniesRequest('long-view'));

        dispatch(
            getOrgasRequest({
                idx: '1',
            }),
        );

        dispatch(getUsersRequest({ idx: '1' }));

        dispatch(END);

        try {
            await sagaTask?.toPromise();
        } catch (e) {
            console.log(e);
        }

        return null;
    }),
);

export default Longs;
