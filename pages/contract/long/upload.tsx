import type { NextPage } from 'next';
import type { ChangeEvent } from 'react';
import type { MyColumnDef } from '@hooks/use-column';
import Head from 'next/head';
import { useMemo, useState, useRef } from 'react';
import { UploadSelect } from '@components/select/Upload';
import { MyTable } from '@components/table';
import { readAndConvert } from '@utils/xlsx';
import { convertForSelectUpload } from '@utils/converter';
import { useLoading } from '@hooks/use-loading';
import { MyLayout } from '@components/Layout';
import { wrapper } from '@store/redux';
import { permissionMiddleware } from '@utils/middleware/permission';
import { END } from 'redux-saga';
import { getCompaniesRequest } from '@actions/hr/get-companies';
import { MySelect } from '@components/select';
import { MyInput } from '@components/input';
import { MyButton } from '@components/button';
import { MyFooter } from '@components/footer';
import { CoreSelectOption } from '@interfaces/core';
import { MyLocalPagination } from '@components/pagination/local';

const LongSelectUpload: NextPage = () => {
    // const dispatch = useDispatch();

    const loading = useLoading();

    // const [file, setFile] = useState<string>('');

    const fileRef = useRef<HTMLInputElement>(null);

    const [fields, setFields] = useState<CoreSelectOption[]>([]);

    const [originData, setOriginData] = useState<any[]>([]);

    const [displayData, setDisplayData] = useState<any[]>([]);

    const [selectedField] = useState<CoreSelectOption[]>([
        {
            label: '계약번호',
            value: '7',
        },
    ]);

    const handleClickFile = () => {
        if (fileRef.current) {
            fileRef.current.click();
        }
    };

    const handleChangeFile = async (evt: ChangeEvent<any>) => {
        const file = evt.target.files[0];

        loading.on();

        try {
            const { fields, data } = await readAndConvert(
                file,
                convertForSelectUpload,
            );

            setFields(fields);

            setOriginData(data);
        } catch (error) {
            console.error(error);
        } finally {
            loading.off();
        }
    };

    const columns = useMemo<MyColumnDef[]>(
        () =>
            fields.map(({ label, value }) => {
                return {
                    columns: [
                        {
                            header: (info: any) => <strong>{label}</strong>,
                            accessorKey: value,
                            cell: (info: any) => (
                                <span
                                    className="text-truncate d-block"
                                    style={{ width: 100 }}
                                >
                                    {info.getValue()}
                                </span>
                            ),
                        },
                    ],
                    header: (info: any) => {
                        let cellValue = info.column.id;

                        return (
                            <div>
                                <MySelect
                                    options={fields}
                                    placeHolderFontSize={16}
                                    height="30px"
                                />
                            </div>
                        );
                    },
                    accessorKey: value,
                };
            }),
        [fields],
    );

    return (
        <>
            <Head>
                <title>선택업로드</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>
            <MyLayout>
                <div className="wr-pages-long-list">
                    <div className="wr-pages-detail__block">
                        <div className="wr-pages-detail__title">
                            <strong>장기 선택업로드</strong>
                        </div>
                        <div className="wr-pages-detail__content">
                            <div className="d-flex justify-content-between">
                                <div className="d-flex">
                                    <div style={{ width: 150 }}>
                                        <MySelect
                                            inputId="orga"
                                            placeHolderFontSize={16}
                                        />
                                    </div>

                                    <MyInput
                                        type="text"
                                        placeholder=""
                                        readOnly
                                        className="wr-border-l--hide"
                                        onClick={handleClickFile}
                                        button={{
                                            type: 'button',
                                            className: 'btn-primary btn-sm',
                                            onClick: handleClickFile,
                                            children: (
                                                <>
                                                    <span>파일찾기</span>
                                                </>
                                            ),
                                        }}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="wr-pages-long-list__body wr-mt">
                        <div className="wr-table--scrollable h-100">
                            <MyTable
                                columns={columns}
                                data={displayData}
                                pageSize={displayData.length}
                            />
                        </div>
                    </div>
                    <MyFooter>
                        <MyLocalPagination
                            data={originData}
                            setDisplayData={setDisplayData}
                        >
                            <span>
                                건수: {originData.length.toLocaleString()}
                            </span>
                        </MyLocalPagination>
                        {/* <MyPagination
                            // requestAction={getLongsRequest}
                            // successAction={getLongsSuccess}
                            payload={null}
                            total={excelFields.length}
                        ></MyPagination> */}
                    </MyFooter>
                </div>
                <input
                    type="file"
                    onChange={handleChangeFile}
                    hidden
                    ref={fileRef}
                />
            </MyLayout>
        </>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    permissionMiddleware(async ({ dispatch, sagaTask }) => {
        dispatch(getCompaniesRequest('long-use'));

        dispatch(END);

        await sagaTask?.toPromise();

        return null;
    }),
);

export default LongSelectUpload;
