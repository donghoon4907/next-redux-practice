import type { NextPage } from 'next';
import type { AppState } from '@reducers/index';
import type { DemoState } from '@reducers/demo';
import type { CoreSelectOption } from '@interfaces/core';
import type { ColumnDef } from '@tanstack/react-table';
import Head from 'next/head';
import { useState, useMemo } from 'react';
import { useSelector } from 'react-redux';
import { END } from 'redux-saga';
import { Header } from '@components/header';
import { Table } from '@components/table';
import { wrapper } from '@store/redux';
import { demoRequest, demoSuccess } from '@actions/demo/demo.action';
import { SHOW_COUNTS } from '@constants/selectOption';
import { MySelect } from '@components/select';
import { Label } from '@components/label';
import { X_SEARCH_FILTERS, X_SEARCH_WHERES } from '@constants/filter';
import { MyCheckbox } from '@components/checkbox';

const isEllipsis = (t: string) => {
    let output = false;
    if (t === 'ptitle') {
        output = true;
    }

    return output;
};

const Demo: NextPage = () => {
    const { fields, data, total } = useSelector<AppState, DemoState>(
        (props) => props.demo,
    );

    const [showCounts, setShowCounts] = useState<readonly CoreSelectOption[]>(
        [],
    );

    const [org, setOrg] = useState<CoreSelectOption | null>(null);

    const handleChange = (org: CoreSelectOption | null) => {
        setOrg(org);
    };

    const columns = useMemo<ColumnDef<any>[]>(
        () =>
            Object.entries(fields).map(([key, value]) => {
                return {
                    header: (info: any) => {
                        return (
                            <span
                                className={
                                    isEllipsis(info.column.id)
                                        ? 'ellipsisTarget'
                                        : ''
                                }
                            >
                                {key}
                            </span>
                        );
                    },
                    accessorKey: value,
                    cell: (info: any) => {
                        return (
                            <span
                                className={
                                    isEllipsis(info.column.id)
                                        ? 'text-truncate d-block'
                                        : ''
                                }
                            >
                                {info.getValue()}
                            </span>
                        );
                    },
                };
            }),
        [fields],
    );

    return (
        <div className="app-container app-theme-white fixed-header fixed-sidebar fixed-footer">
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <section>
                <Header />
                <div className="wr-main__wrap">
                    <main className="wr-main">
                        <div className="breadcrumb-wrap">
                            <nav aria-label="breadcrumb">
                                <ol className="breadcrumb">
                                    <li className="breadcrumb-item">
                                        <a href="#">개인영업 1</a>
                                    </li>
                                    <li className="breadcrumb-item">
                                        <a href="#">신노원사업단</a>
                                    </li>
                                    <li
                                        className="breadcrumb-item active"
                                        aria-current="page"
                                    >
                                        업무보전
                                    </li>
                                </ol>
                            </nav>
                        </div>
                        <div className="row mt-2">
                            <div className="col-6">
                                <div className="row">
                                    {X_SEARCH_WHERES[0].map((v) => (
                                        <div className="col" key={v.id}>
                                            <Label>{v.label}</Label>
                                            <MySelect
                                                width={v.width}
                                                options={SHOW_COUNTS}
                                                onChange={handleChange}
                                                placeholder="선택하세요"
                                            />
                                        </div>
                                    ))}
                                </div>
                                <div className="row">
                                    {X_SEARCH_WHERES[2].map((v) => (
                                        <div className="col" key={v.id}>
                                            <Label>{v.label}</Label>
                                            <MySelect
                                                width={v.width}
                                                options={SHOW_COUNTS}
                                                onChange={handleChange}
                                                placeholder="선택하세요"
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                            <div className="col-6">
                                <div className="row">
                                    {X_SEARCH_WHERES[1].map((v) => (
                                        <div className="col" key={v.id}>
                                            <Label>{v.label}</Label>
                                            <MySelect
                                                width={v.width}
                                                options={SHOW_COUNTS}
                                                onChange={handleChange}
                                                placeholder="선택하세요"
                                            />
                                        </div>
                                    ))}
                                </div>
                                <div className="row">
                                    <div className="col">
                                        <div className="d-flex justify-content-start align-items-center mt-2">
                                            {X_SEARCH_FILTERS.map((filter) => (
                                                <MyCheckbox
                                                    key={filter.id}
                                                    id={filter.id}
                                                    label={filter.label}
                                                />
                                            ))}
                                        </div>
                                    </div>
                                    {/* {X_SEARCH_WHERES[3].map((v) => (
                                        <div className="col" key={v.id}>
                                            <Label>{v.label}</Label>
                                            <MySelect
                                                width={v.width}
                                                options={SHOW_COUNTS}
                                                onChange={handleChange}
                                                placeholder="선택하세요"
                                            />
                                        </div>
                                    ))} */}
                                </div>
                            </div>
                        </div>
                        <div className="row mt-2">
                            <div className="col"></div>
                            <div className="col"></div>
                        </div>
                        <div className="row mt-2">
                            <div className="col">
                                <div className="wr-table__wrap">
                                    <Table columns={columns} data={data} />
                                </div>
                                <div className="row mt-2">
                                    <div className="col wr-pagination">
                                        <div></div>
                                        <nav aria-label="Page navigation example">
                                            <ul className="pagination">
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        {'<<'}
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        {'<'}
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        1
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        2
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        3
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        4
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        5
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        {'>'}
                                                    </a>
                                                </li>
                                                <li className="page-item">
                                                    <a
                                                        className="page-link"
                                                        href="#"
                                                    >
                                                        {'>>'}
                                                    </a>
                                                </li>
                                            </ul>
                                        </nav>
                                        <div></div>
                                    </div>
                                </div>
                                <div className="flex items-center gap-2">
                                    <button
                                        className="border rounded p-1"
                                        // onClick={() => table.setPageIndex(0)}
                                        // disabled={!table.getCanPreviousPage()}
                                    >
                                        {'<<'}
                                    </button>
                                    <button
                                        className="border rounded p-1"
                                        // onClick={() => table.previousPage()}
                                        // disabled={!table.getCanPreviousPage()}
                                    >
                                        {'<'}
                                    </button>
                                    <button
                                        className="border rounded p-1"
                                        // onClick={() => table.nextPage()}
                                        // disabled={!table.getCanNextPage()}
                                    >
                                        {'>'}
                                    </button>
                                    <button
                                        className="border rounded p-1"
                                        // onClick={() =>
                                        //     table.setPageIndex(
                                        //         table.getPageCount() - 1,
                                        //     )
                                        // }
                                        // disabled={!table.getCanNextPage()}
                                    >
                                        {'>>'}
                                    </button>
                                    <span className="flex items-center gap-1">
                                        <div>Page</div>
                                        <div>
                                            {total.cntrow.toLocaleString()}
                                        </div>
                                        {/* <strong>
                                            {table.getState().pagination
                                                .pageIndex + 1}{' '}
                                            of {table.getPageCount()}
                                        </strong> */}
                                    </span>
                                    <span className="flex items-center gap-1">
                                        | 페이지 바로가기:
                                        <input
                                            type="number"
                                            // defaultValue={
                                            //     table.getState().pagination
                                            //         .pageIndex + 1
                                            // }
                                            // onChange={(e) => {
                                            //     const page = e.target.value
                                            //         ? Number(e.target.value) - 1
                                            //         : 0;
                                            //     table.setPageIndex(page);
                                            // }}
                                            className="border p-1 rounded w-16"
                                        />
                                    </span>
                                    <select
                                    // value={
                                    //     table.getState().pagination.pageSize
                                    // }
                                    // onChange={(e) => {
                                    //     table.setPageSize(
                                    //         Number(e.target.value),
                                    //     );
                                    // }}
                                    >
                                        {[25, 50, 100, 500].map((pageSize) => (
                                            <option
                                                key={pageSize}
                                                value={pageSize}
                                            >
                                                {pageSize}줄보기
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </div>
                    </main>
                </div>
            </section>
        </div>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    ({ dispatch, sagaTask }) =>
        async (_) => {
            dispatch(
                demoRequest({
                    successAction: demoSuccess,
                    callback: () => {},
                }),
            );

            dispatch(END);

            await sagaTask?.toPromise();

            return {
                props: {},
            };
        },
);

export default Demo;
