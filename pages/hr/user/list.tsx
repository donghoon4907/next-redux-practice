import type { NextPage } from 'next';
import type { AppState } from '@reducers/index';
import type { HrState } from '@reducers/hr';
import type { SearchUsersRequestPayload } from '@actions/hr/search-users.action';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { END } from 'redux-saga';
import { MyTable } from '@components/table';
import { wrapper } from '@store/redux';
import { MyPagination } from '@components/pagination';
import { MyLayout } from '@components/Layout';
import { MyFooter } from '@components/footer';
import { useColumn } from '@hooks/use-column';
import { permissionMiddleware } from '@utils/middleware/permission';
import { UserSearchFilterTemplate } from '@partials/hr/user/template/SearchFilter';
import {
    searchUsersRequest,
    searchUsersSuccess,
} from '@actions/hr/search-users.action';

const Users: NextPage = () => {
    const displayName = 'wr-pages-list';

    const router = useRouter();

    const { searchUsers } = useSelector<AppState, HrState>((props) => props.hr);

    const columns = useColumn(searchUsers.fields);

    const handleClickRow = ({ userid }: any) => {
        router.replace(`/hr/user/${userid}`);
    };

    return (
        <>
            <Head>
                <title>영업가족목록</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>
            <MyLayout>
                <div className={displayName}>
                    {/* <Breadcrumb /> */}
                    <div className={`${displayName}__header`}>
                        <UserSearchFilterTemplate />
                    </div>
                    <div className={`${displayName}__body wr-mt`}>
                        <div className="wr-table--scrollable wr-table--hover">
                            <MyTable
                                columns={columns}
                                data={searchUsers.rows}
                                pageSize={searchUsers.lastPayload?.nums}
                                onClickRow={handleClickRow}
                            />
                        </div>
                    </div>
                    <MyFooter>
                        <MyPagination total={searchUsers.total.count}>
                            <span>
                                건수: {searchUsers.total.count.toLocaleString()}
                            </span>
                        </MyPagination>
                    </MyFooter>
                </div>
            </MyLayout>
        </>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    permissionMiddleware(async ({ dispatch, sagaTask }, ctx) => {
        const { page, nums, search, order } = ctx.query;

        const params: SearchUsersRequestPayload = {
            page: 1,
            nums: 25,
            condition: {},
            order: {},
            successAction: searchUsersSuccess,
        };

        if (page) {
            params.page = +(page as string);
        }
        if (nums) {
            params.nums = +(nums as string);
        }

        if (order) {
            const [type, sort] = (order as string).split(',');

            params.order[type] = sort;
        }

        if (search) {
            params.condition!['search'] = search as string;
            // if (type === 'userid') {
            //     params.condition['userid'] = String(search).toUpperCase();
            // } else if (type === 'fc') {
            //     params.condition['fc'] = search;
            // }
        }

        dispatch(searchUsersRequest(params));

        dispatch(END);

        try {
            await sagaTask?.toPromise();
        } catch (e) {
            console.log(e);
        }

        return null;
    }),
);

export default Users;
