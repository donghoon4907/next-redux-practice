import type { NextPage } from 'next';
import type { AppState } from '@reducers/index';
import type { HrState } from '@reducers/hr';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { END } from 'redux-saga';
import dayjs from 'dayjs';
import { MyTable } from '@components/table';
import { wrapper } from '@store/redux';
import { MyPagination } from '@components/pagination';
import { MyLayout } from '@components/Layout';
import { useColumn } from '@hooks/use-column';
import { permissionMiddleware } from '@utils/middleware/permission';
import {
    searchOrgasSuccess,
    searchOrgasRequest,
} from '@actions/hr/search-orgas.action';
import { OrgaSearchFilterTemplate } from '@partials/hr/orga/template/SearchFilter';
import { getOrgasRequest } from '@actions/hr/get-orgas';

const Orgas: NextPage = () => {
    const displayName = 'wr-pages-list2';

    const { query } = useRouter();

    const { searchOrgas } = useSelector<AppState, HrState>((props) => props.hr);

    const columns = useColumn(searchOrgas.fields);

    const handleClickRow = () => {
        alert('준비중입니다.');
        // router.replace(`/hr/user/${userid}`);
    };

    const total = searchOrgas.total ? searchOrgas.total.count : 0;

    const pageSize = query.nums ? +query.nums : 25;

    const firstPage = query.page ? +query.page : 1;

    const lastPage = Math.ceil(total / pageSize);

    return (
        <>
            <Head>
                <title>지점명세</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
            </Head>
            <MyLayout>
                <div className={displayName}>
                    {/* <Breadcrumb /> */}
                    <OrgaSearchFilterTemplate />
                    <div className={`${displayName}__toolbar wr-mt`}>
                        <div className={`${displayName}__total`}>
                            조직관리 / 지점명세 ({firstPage}-{lastPage}) /{' '}
                            {total ? total.toLocaleString() : 0}
                        </div>
                        <div className={`${displayName}__tool`}></div>
                    </div>
                    <div className={`${displayName}__body`}>
                        <div className="wr-table--scrollable wr-table--hover">
                            <MyTable
                                columns={columns}
                                data={searchOrgas.rows}
                                pageSize={searchOrgas.lastPayload?.nums}
                                onClickRow={handleClickRow}
                            />
                        </div>
                    </div>
                    <div className={`${displayName}__footer`}>
                        <MyPagination total={total}></MyPagination>
                    </div>
                </div>
            </MyLayout>
        </>
    );
};

export const getServerSideProps = wrapper.getServerSideProps(
    permissionMiddleware(async ({ dispatch, sagaTask }, ctx) => {
        const { page, nums, search, order, date, date_type, ...rest } =
            ctx.query;

        const params: any = {
            page: 1,
            nums: 25,
            condition: {
                // 서버 미작업으로 인한 주석 처리
                // indate: [
                //     dayjs(new Date()).format('YYYY-MM-01'),
                //     dayjs(new Date()).format('YYYY-MM-DD'),
                // ],
            },
            order: {},
            successAction: searchOrgasSuccess,
        };
        // 페이지공통 - 페이지 번호
        if (page) {
            params.page = Number(page);
        }
        // 페이지공통 - 페이지 크기
        if (nums) {
            params.nums = Number(nums);
        }
        // 페이지공통 - 정렬
        if (order) {
            const [type, sort] = String(order).split(',');

            params.order[type] = sort;
        }
        // 페이지공통 - 검색어
        if (search) {
            params.condition['search'] = String(search);
        }
        // 서버 미작업으로 인한 주석 처리
        // if (date_type && date) {
        //     params.condition[String(date_type)] = String(date).split(',');
        // }
        // for (const [key, value] of Object.entries(rest)) {
        //     params.condition[key] = value;
        // }

        dispatch(
            getOrgasRequest({
                idx: '1',
            }),
        );

        dispatch(searchOrgasRequest(params));

        dispatch(END);

        try {
            await sagaTask?.toPromise();
        } catch (e) {
            console.log(e);
        }

        return null;
    }),
);

export default Orgas;
